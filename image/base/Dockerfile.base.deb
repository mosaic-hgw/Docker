FROM debian:stable-slim

# ###license-information-start###
# The MOSAIC-Project - Debian Stable
# __
# Copyright (C) 2009 - 2023 Institute for Community Medicine
# University Medicine of Greifswald - mosaic-project@uni-greifswald.de
# __
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
# ###license-information-end###

MAINTAINER Ronny Schuldt <ronny.schuldt@uni-greifswald.de>

# variables
ARG DATE_YMD="20231211"
ARG WAIT_FOR_IT_DOWNLOAD_URL="https://raw.githubusercontent.com/vishnubob/wait-for-it/ed77b63706ea721766a62ff22d3a251d8b4a6a30/wait-for-it.sh"
ARG WAIT_FOR_IT_SHA256="2ea7475e07674e4f6c1093b4ad6b0d8cbbc6f9c65c73902fb70861aa66a6fbc0"

ENV HOME="/opt/mosaic"
ENV USER="mosaic" \
    \
    PROCESS_UID="1111" \
    PROCESS_GID="1111" \
    MOS_READY_PATH="${HOME}/ready" \
    MOS_TEMP_PATH="${HOME}/temp" \
    TZ="Europe/Berlin" \
    MOS_RUN_MODE="service" \
    ENTRY_LOGS="/entrypoint-logs" \
    LINE="========================================================================="

# annotations
LABEL maintainer="ronny.schuldt@uni-greifswald.de" \
      org.opencontainers.image.authors="university-medicine greifswald" \
      org.opencontainers.image.source="https://hub.docker.com/repository/docker/mosaicgreifswald/debian" \
      org.opencontainers.image.version="${DATE_YMD}" \
      org.opencontainers.image.vendor="uni-greifswald.de" \
      org.opencontainers.image.title="mosaic-debian" \
      org.opencontainers.image.license="AGPLv3"

RUN echo && echo && \
    echo ${LINE} && \
    echo && \
    echo "  Create new image by Dockerfile (using $(basename $0))" && \
    echo "  |" && \
    echo "  |____ 1. install system-updates" && \
    (apt-get update > install.log 2>&1 || (>&2 cat install.log && echo && exit 1)) && \
    (apt-get upgrade -y > install.log 2>&1 || (>&2 cat install.log && echo && exit 1)) && \
    \
    echo "  |____ 2. create user and group" && \
    groupadd --g ${PROCESS_GID} ${USER} && \
    useradd --no-log-init -m -u ${PROCESS_UID} -g ${PROCESS_GID} -d ${HOME} ${USER} && \
    chmod 755 ${HOME} && \
    cd ${HOME} && \
    \
    echo "  |____ 3. create folders and permissions" && \
    mkdir ${MOS_READY_PATH} ${MOS_TEMP_PATH} ${ENTRY_LOGS} && \
    chmod go+w  ${MOS_READY_PATH} ${ENTRY_LOGS} && \
    chown ${USER}:${USER} ${MOS_READY_PATH} ${ENTRY_LOGS} && \
    \
    echo "  |____ 4. install missing packages (curl)" && \
    (apt-get install -y curl > install.log 2>&1 || (>&2 cat install.log && echo && exit 1)) && \
    \
    echo "  |____ 5. download wait-for-it-script" && \
    (curl -Lfo wait-for-it.sh ${WAIT_FOR_IT_DOWNLOAD_URL} > install.log 2>&1 || (>&2 cat install.log ; >&2 echo "curl -Lfo wait-for-it.sh ${WAIT_FOR_IT_DOWNLOAD_URL}\n" && exit 1))  && \
    (sha256sum wait-for-it.sh | grep -q ${WAIT_FOR_IT_SHA256} > /dev/null || (>&2 echo "sha256sum failed $(sha256sum wait-for-it.sh)" && exit 1)) && \
    chmod +x wait-for-it.sh && \
    \
    echo "  |____ 6. create bash-scripts" && \
    { \
        echo '#!/bin/bash'; \
        echo; \
        echo '# read parameters if exists'; \
        echo 'while [[ $# -gt 0 ]]; do case "$1" in'; \
        echo '  --add-healthcheck-script=*) echo "${1#*=} || exit 1" >> '${HOME}'/healthcheck.sh; shift 1 ;;'; \
        echo '  --add-run-script=*)         echo "#${1#*=}" >> '${HOME}'/run.sh; shift 1 ;;'; \
        echo '  --add-entrypoint=*)         V=${1#*=}; printf "echo \"  %-27s: %s\"\\n" "${V%%:*}" "${V#*:}" >> '${HOME}'/entrypoints.sh; shift 1 ;;'; \
        echo '  --add-version=*)            V=${1#*=}; printf "echo \"  %-27s: %s\"\\n" "${V%%:*}" "${V#*:}" >> '${HOME}'/versions.sh; shift 1 ;;'; \
        echo '  --os-updated)               cat '${HOME}'/versions.sh | sed -r "s/(last {1}updated +: )[0-9 :-]+/\\1$(date +"%F %T")/" > '${HOME}'/versions.sh; shift 1 ;;'; \
        echo '  *)                          echo "Unknown option: $1"; exit 1 ;;'; \
        echo 'esac; done'; \
    } > register.sh && \
    ln -s ${HOME}/register.sh /usr/bin/register && \
    \
    { \
        echo '#!/bin/bash'; \
        echo; \
        echo 'echo "${LINE}"; echo'; \
        echo 'echo "  https://hub.docker.com/repository/docker/mosaicgreifswald"'; \
        echo 'echo; echo "${LINE}"; echo'; \
        echo 'versions'; \
        echo 'echo; echo "${LINE}"; echo'; \
        echo; \
        echo 'echo "  test write-permission in folder ${ENTRY_LOGS}"'; \
        echo 'find ${ENTRY_LOGS} -maxdepth 2 -type d -exec realpath {} \; | while read DIR; do'; \
        echo '  echo -n "  - ${DIR} -> "'; \
        echo '  (touch ${DIR}/test.write.permission && rm ${DIR}/test.write.permission) 2>/dev/null && echo "ok" || echo "not permitted"'; \
        echo 'done'; \
        echo 'echo; echo "${LINE}"; echo'; \
        echo; \
        echo 'RUN_SCRIPTS=$(cat '${HOME}'/run.sh | sed -n "/^### registered run-scripts/,//p" | tail -n+2 | sed "s/#//" | sort -k1 --sort=version)'; \
        echo 'echo "$(echo ${RUN_SCRIPTS} | wc -w) run-script(s) found to execute in following order and type"'; \
        echo 'echo "${RUN_SCRIPTS}"'; \
        echo 'echo'; \
        echo; \
        echo 'if [ $(echo ${RUN_SCRIPTS} | wc -w) -eq 0 ]; then'; \
        echo '  echo "no run-scripts found to start"'; \
        echo '  exit'; \
        echo 'fi'; \
        echo; \
        echo 'SERVICE_PIDS=()'; \
        echo 'checkRunningServices() {'; \
        echo '  if [ ${#SERVICE_PIDS[@]} -gt 0 ]; then for PID in "${!SERVICE_PIDS[@]}"; do if ! ls /proc/${PID}/exe > /dev/null 2>&1; then'; \
        echo '    echo "$(echo '$'{SERVICE_PIDS[$PID]} | cut -d: -f1) is stopped."'; \
        echo '    return 1'; \
        echo '  fi; done; fi'; \
        echo '  return 0'; \
        echo '}'; \
        echo; \
        echo 'stopRunningServices() {'; \
        echo '  if [ ${#SERVICE_PIDS[@]} -gt 0 ]; then for PID in "${!SERVICE_PIDS[@]}"; do if ls /proc/${PID}/exe > /dev/null 2>&1; then'; \
        echo '    echo "stop $(echo '$'{SERVICE_PIDS[$PID]} | cut -d: -f1)"'; \
        echo '    kill ${PID}'; \
        echo '  fi; done; fi'; \
        echo '}'; \
        echo; \
        echo 'startService() {'; \
        echo '  local SCRIPT=$(echo ${1} | cut -d: -f1)'; \
        echo '  local STARTED=$(echo ${1} | cut -d: -f2)'; \
        echo '  echo -n "start ${SCRIPT} as service" '; \
        echo '  [ "x${STARTED}" = "x" ] && echo || echo " and wait for running with ${STARTED}"'; \
        echo '  ${SCRIPT} &'; \
        echo '  SERVICE_PIDS[$!]="${1}"'; \
        echo '  if [ "x${STARTED}" != "x" ]; then while checkRunningServices && ! ${STARTED} ; do sleep 1; done; fi'; \
        echo '}'; \
        echo; \
        echo 'for RUN_SCRIPT in ${RUN_SCRIPTS}; do'; \
        echo '  TYPE=$(echo ${RUN_SCRIPT} | cut -d: -f2)'; \
        echo '  SCRIPT=$(echo ${RUN_SCRIPT} | cut -d: -f3)'; \
        echo '  STARTED=$(echo ${RUN_SCRIPT} | cut -d: -f4)'; \
        echo; \
        echo '  if ! checkRunningServices; then'; \
        echo '    echo "one service is finished. abort all start processes."'; \
        echo '    stopRunningServices'; \
        echo '    exit 1'; \
        echo '  fi'; \
        echo; \
        echo '  case "${TYPE}" in'; \
        echo '    service) startService "${SCRIPT}:${STARTED}" ;;'; \
        echo '    action)'; \
        echo '      echo "start ${SCRIPT} as action"'; \
        echo '      if ! ${SCRIPT}; then'; \
        echo '        echo "failed ${SCRIPT}, abort all start processes."'; \
        echo '        stopRunningServices'; \
        echo '        exit 1'; \
        echo '      fi'; \
        echo '      ;;'; \
        echo '    *) echo "Unknown option: $1"; exit 1 ;;'; \
        echo '  esac'; \
        echo 'done'; \
        echo; \
        echo 'if [ "${MOS_RUN_MODE}" == "action" ]; then'; \
        echo '  stopRunningServices'; \
        echo '  exit 0'; \
        echo 'fi'; \
        echo; \
        echo 'echo "all services started"'; \
        echo 'while true; do'; \
        echo '  case "${MOS_RUN_MODE}" in'; \
        echo '    service)'; \
        echo '      if [ ${#SERVICE_PIDS[@]} -gt 0 ]; then for PID in "${!SERVICE_PIDS[@]}"; do if ! ls /proc/${PID}/exe > /dev/null 2>&1; then'; \
        echo '        echo "$(echo '$'{SERVICE_PIDS[$PID]} | cut -d: -f1) ${SCRIPT}"'; \
        echo '        startService "'$'{SERVICE_PIDS[$PID]}"'; \
        echo '        unset "SERVICE_PIDS[PID]"'; \
        echo '      fi; done; fi ;;'; \
        echo '    cascade)'; \
        echo '      if ! checkRunningServices; then'; \
        echo '        stopRunningServices'; \
        echo '        exit 1'; \
        echo '      fi ;;'; \
        echo '    *)'; \
        echo '      # do nothing'; \
        echo '      ;;'; \
        echo '  esac'; \
        echo '  sleep 5'; \
        echo 'done'; \
        echo; \
        echo '### registered run-scripts'; \
    } > run.sh && \
    \
    echo '#!/bin/bash' | tee healthcheck.sh entrypoints.sh > versions.sh && \
    echo 'echo "  last updated               : '$(date +"%F %T")'"' >> versions.sh && \
    ln -s ${HOME}/versions.sh /usr/bin/versions && \
    ln -s ${HOME}/entrypoints.sh /usr/bin/entrypoints && \
    \
    echo "  |____ 7. create versions and entrypoints" && \
    /bin/bash ${HOME}/register.sh \
        --os-updated \
        --add-version='Distribution:$(cat /etc/os-release | grep -E "^NAME" | cut -d"\"" -f2 ) $(cat /etc/debian_version)' \
        --add-entrypoint="ENTRY_LOGS:${ENTRY_LOGS}" && \
    \
    echo "  |____ 8. cleanup" && \
    (( \
        apt-get clean && \
        apt-get autoclean && \
        apt-get autoremove && \
        rm -rf ${MOS_TEMP_PATH}/* /var/lib/apt/lists/* /var/cache/apt/* && \
        chown ${USER}:${USER} -R ${HOME} && \
        chmod u+x -R ${HOME}/*.sh \
    ) > install.log 2>&1 || (>&2 cat install.log && echo && exit 1)) && rm -f install.log && \
    \
    echo && echo ${LINE} && echo && ${HOME}/versions.sh && \
    echo && echo ${LINE} && echo && ${HOME}/entrypoints.sh && \
    echo && echo ${LINE} && echo

WORKDIR ${HOME}
USER ${USER}

HEALTHCHECK CMD ["./healthcheck.sh"]
CMD ["./run.sh"]
