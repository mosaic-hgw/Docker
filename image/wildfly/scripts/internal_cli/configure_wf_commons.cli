# logger for console
#####################
#>deprecated-env< CONSOLE_LOG_LEVEL WF_SYSTEM_LOG_LEVEL
set logLevel=${CONSOLE_LOG_LEVEL}
#>deprecated-env< WF_CONSOLE_LOG_LEVEL WF_SYSTEM_LOG_LEVEL
if (outcome == "success") of :resolve-expression(expression=${env.WF_CONSOLE_LOG_LEVEL})
	set logLevel=${env.WF_CONSOLE_LOG_LEVEL}
end-if
#>available-env< WF_SYSTEM_LOG_LEVEL INFO
if (outcome == "success") of :resolve-expression(expression=${env.WF_SYSTEM_LOG_LEVEL})
	set logLevel=${env.WF_SYSTEM_LOG_LEVEL}
end-if
if (result ~= "(?i)(trace|debug|info|warn|error|fatal)") of :resolve-expression(expression=$logLevel)
	echo \>\>\> set system-logger to level $logLevel
	/subsystem=logging/console-handler=CONSOLE:write-attribute(name=level,value=$logLevel)
	/subsystem=logging/root-logger=ROOT:write-attribute(name=level,value=$logLevel)
end-if

#>available-env< WF_SYSTEM_LOG_PATTERN %d %-5.5p %-4.4L %-40.40c{2.} | %m%n
set logPattern="%d %-5.5p %-4.4L %-40.40c{2.} | %m%n"
if (outcome == "success") of :resolve-expression(expression=${env.WF_SYSTEM_LOG_PATTERN})
	set logPattern=${env.WF_SYSTEM_LOG_PATTERN}
end-if
#>deprecated-env< WF_CONSOLE_LOG_TO_FILE WF_SYSTEM_LOG_TO
if (result ~= "(?i)(on|true|yes|1)") of :resolve-expression(expression=${env.WF_CONSOLE_LOG_TO_FILE})
    set logTo="file"
else
    set logTo="console"
end-if
#>available-env< WF_SYSTEM_LOG_TO CONSOLE
if (outcome == "success") of :resolve-expression(expression=${env.WF_SYSTEM_LOG_TO})
	set logTo=${env.WF_SYSTEM_LOG_TO}
end-if
if (result ~= "(?i).*console.*") of :resolve-expression(expression=$logTo)
    echo \>\>\> add system-logger to console
else
	/subsystem=logging/root-logger=ROOT:remove-handler(name="CONSOLE")
end-if
/subsystem=logging/root-logger=ROOT:remove-handler(name="FILE")
if (result ~= "(?i).*file.*") of :resolve-expression(expression=$logTo)
    echo \>\>\> add system-logger as separate file (system.log)
	/subsystem=logging/custom-handler=system-file-handler:add(class=org.jboss.logmanager.handlers.PeriodicSizeRotatingFileHandler, module=org.jboss.logmanager, formatter=$logPattern, properties={rotateSize=10240000,maxBackupIndex=20,append=true,suffix=".yyyy-MM-dd",fileName="${jboss.server.log.dir}/system/system.log"})
    /subsystem=logging/root-logger=ROOT:add-handler(name="system-file-handler")
end-if

# Set WSDL address to use incoming request address
###################################################
/subsystem=webservices:write-attribute(name=wsdl-host, value=jbossws.undefined.host)
# Set WSDL scheme to HTTPS (optional)
# /subsystem=webservices:write-attribute(name=wsdl-uri-scheme, value=https)
# Set port for WSDL HTTP scheme (optional)
# /subsystem=webservices:write-attribute(name=wsdl-port, value=8080)
# Set port for WSDL HTTPS scheme (optional)
# /subsystem=webservices:write-attribute(name=wsdl-secure-port, value=8443)

# set custom max-post-size
###########################
#>deprecated-env< MAX_POST_SIZE WF_MAX_POST_SIZE
#>available-env< WF_MAX_POST_SIZE 10485760
set temp=${MAX_POST_SIZE}
if (outcome == "success") of :resolve-expression(expression=${env.WF_MAX_POST_SIZE})
	set temp=${env.WF_MAX_POST_SIZE}
end-if
if (result ~= "[0-9]+") of :resolve-expression(expression=$temp)
	echo \>\>\> set max-post-size to $temp
	/subsystem=undertow/server=default-server/ajp-listener=myListener:write-attribute(name=max-post-size,value=$temp)
	/subsystem=undertow/server=default-server/http-listener=default:write-attribute(name=max-post-size,value=$temp)
	/subsystem=undertow/server=default-server/https-listener=https:write-attribute(name=max-post-size,value=$temp)
end-if

# set custom max-parameters
############################
#>available-env< WF_MAX_PARAMETERS 1000
set temp=${env.WF_MAX_PARAMETERS}
if (result ~= "[0-9]+") of :resolve-expression(expression=$temp)
	echo \>\>\> set max-parameters to $temp
	/subsystem=undertow/server=default-server/ajp-listener=myListener:write-attribute(name=max-parameters,value=$temp)
	/subsystem=undertow/server=default-server/http-listener=default:write-attribute(name=max-parameters,value=$temp)
	/subsystem=undertow/server=default-server/https-listener=https:write-attribute(name=max-parameters,value=$temp)
end-if

# set custom max-child-elements
################################
#>deprecated-env< MAX_CHILD_ELEMENTS WF_MAX_CHILD_ELEMENTS
#>available-env< WF_MAX_CHILD_ELEMENTS 50000
set temp=${MAX_CHILD_ELEMENTS}
if (outcome == "success") of :resolve-expression(expression=${env.WF_MAX_CHILD_ELEMENTS})
	set temp=${env.WF_MAX_CHILD_ELEMENTS}
end-if
if (result ~= "[0-9]+") of :resolve-expression(expression=$temp)
	echo \>\>\> set max-child-elements to $temp
    try
    	/system-property=org.apache.cxf.stax.maxChildElements:add(value=$temp)
    catch
    	/system-property=org.apache.cxf.stax.maxChildElements:write-attribute(name=value,value=$temp)
    end-try
end-if

# set custom blocking-timeout
##############################
#>available-env< WF_BLOCKING_TIMEOUT 300
if (result ~= "[0-9]+") of :resolve-expression(expression=${env.WF_BLOCKING_TIMEOUT})
    set temp=${env.WF_BLOCKING_TIMEOUT}
    echo \>\>\> set blocking-timeout to $temp seconds
    try
    	/system-property=jboss.as.management.blocking.timeout:add(value=$temp)
    catch
    	/system-property=jboss.as.management.blocking.timeout:write-attribute(name=value,value=$temp)
    end-try
end-if

# set custom transaction-timeout
#################################
#>available-env< WF_TRANSACTION_TIMEOUT 300
if (result ~= "[0-9]+") of :resolve-expression(expression=${env.WF_TRANSACTION_TIMEOUT})
    set temp=${env.WF_TRANSACTION_TIMEOUT}
    echo \>\>\> set transaction-timeout to $temp seconds
    /subsystem=transactions/:write-attribute(name=default-timeout,value=$temp)
end-if

# set custom datasources-query-timeout
#######################################
#>available-env< WF_DATASOURCES_QUERY_TIMEOUT 30
if (result ~= "[0-9]+") of :resolve-expression(expression=${env.WF_DATASOURCES_QUERY_TIMEOUT})
    set temp=${env.WF_DATASOURCES_QUERY_TIMEOUT}
	for ds in /subsystem=datasources:read-children-names(child-type=data-source)
    	echo \>\>\> set datasource-query-timeout for $ds to $temp seconds
    	/subsystem=datasources/data-source=$ds:write-attribute(name=query-timeout, value=$temp)
    done
end-if

# enable-http2
###############
#>deprecated-env< WF_DISABLE_HTTP2 WF_ENABLE_HTTP2
#>available-env< WF_ENABLE_HTTP2 FALSE
set temp=true
if (result ~= "(?i)(on|true|yes|1)") of :resolve-expression(expression=${env.WF_DISABLE_HTTP2})
	set temp=false
end-if
if (outcome == "success") of :resolve-expression(expression=${env.WF_ENABLE_HTTP2})
	set temp=${env.WF_ENABLE_HTTP2}
end-if
if (result ~= "(?i)(off|false|no|0)") of :resolve-expression(expression=$temp)
    echo \>\>\> disable http2
    /subsystem=undertow/server=default-server/http-listener=default:write-attribute(name=enable-http2,value=false)
    /subsystem=undertow/server=default-server/http-listener=default:write-attribute(name=allow-unescaped-characters-in-url,value=true)
    /subsystem=undertow/server=default-server/https-listener=https:write-attribute(name=enable-http2,value=false)
    /subsystem=undertow/server=default-server/https-listener=https:write-attribute(name=allow-unescaped-characters-in-url,value=true)
end-if
